class Solution {
public:
    vector<vector<int>> ans;
    vector<int> temp;
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        dfs(candidates, target, 0);
        return ans;
    }
      void dfs(vector<int>& candidates, int target, int level){
          if (target == 0){
              ans.push_back(temp);
              return;          
          }
          
          
          for ( int i  = level; i < candidates.size(); i++){
             if (candidates[i] > target)
			{
				return;
			}
              temp.push_back(candidates[i]);
              dfs(candidates, target - candidates[i], i);
              temp.pop_back();          
          }
      }
};
